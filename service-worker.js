(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1572621468153;

	const files = [
		"service-worker-index.html",
		"GitHub-Mark-32px.png",
		"Twitter_Social_Icon_Rounded_Square_Color.png",
		"f_logo_RGB-Blue_1024.png",
		"favicon.png",
		"fonts/B612-Regular/B612-Regular.eot",
		"fonts/B612-Regular/B612-Regular.svg",
		"fonts/B612-Regular/B612-Regular.ttf",
		"fonts/B612-Regular/B612-Regular.woff",
		"fonts/B612-Regular/preview.html",
		"fonts/B612-Regular/styles.css",
		"fonts/B612Mono-Regular/B612Mono-Regular.eot",
		"fonts/B612Mono-Regular/B612Mono-Regular.svg",
		"fonts/B612Mono-Regular/B612Mono-Regular.ttf",
		"fonts/B612Mono-Regular/B612Mono-Regular.woff",
		"fonts/B612Mono-Regular/styles.css",
		"fonts/Inter/Inter-Black.woff",
		"fonts/Inter/Inter-Black.woff2",
		"fonts/Inter/Inter-BlackItalic.woff",
		"fonts/Inter/Inter-BlackItalic.woff2",
		"fonts/Inter/Inter-Bold.woff",
		"fonts/Inter/Inter-Bold.woff2",
		"fonts/Inter/Inter-BoldItalic.woff",
		"fonts/Inter/Inter-BoldItalic.woff2",
		"fonts/Inter/Inter-ExtraBold.woff",
		"fonts/Inter/Inter-ExtraBold.woff2",
		"fonts/Inter/Inter-ExtraBoldItalic.woff",
		"fonts/Inter/Inter-ExtraBoldItalic.woff2",
		"fonts/Inter/Inter-ExtraLight-BETA.woff",
		"fonts/Inter/Inter-ExtraLight-BETA.woff2",
		"fonts/Inter/Inter-ExtraLightItalic-BETA.woff",
		"fonts/Inter/Inter-ExtraLightItalic-BETA.woff2",
		"fonts/Inter/Inter-Italic.woff",
		"fonts/Inter/Inter-Italic.woff2",
		"fonts/Inter/Inter-Light-BETA.woff",
		"fonts/Inter/Inter-Light-BETA.woff2",
		"fonts/Inter/Inter-LightItalic-BETA.woff",
		"fonts/Inter/Inter-LightItalic-BETA.woff2",
		"fonts/Inter/Inter-Medium.woff",
		"fonts/Inter/Inter-Medium.woff2",
		"fonts/Inter/Inter-MediumItalic.woff",
		"fonts/Inter/Inter-MediumItalic.woff2",
		"fonts/Inter/Inter-Regular.woff",
		"fonts/Inter/Inter-Regular.woff2",
		"fonts/Inter/Inter-SemiBold.woff",
		"fonts/Inter/Inter-SemiBold.woff2",
		"fonts/Inter/Inter-SemiBoldItalic.woff",
		"fonts/Inter/Inter-SemiBoldItalic.woff2",
		"fonts/Inter/Inter-Thin-BETA.woff",
		"fonts/Inter/Inter-Thin-BETA.woff2",
		"fonts/Inter/Inter-ThinItalic-BETA.woff",
		"fonts/Inter/Inter-ThinItalic-BETA.woff2",
		"fonts/Inter/Inter-italic.var.woff2",
		"fonts/Inter/Inter-upright.var.woff2",
		"fonts/Inter/Inter.var.woff2",
		"fonts/Inter/inter.css",
		"fonts/MonoidNerdFontC/MonoidNerdFontC-Retina.svg",
		"fonts/MonoidNerdFontC/MonoidNerdFontC-Retina.ttf",
		"fonts/MonoidNerdFontC/MonoidNerdFontC-Retina.woff",
		"fonts/MonoidNerdFontC/MonoidNerdFontC-Retina.woff2",
		"fonts/MonoidNerdFontC/stylesheet.css",
		"global.css",
		"logo-192.png",
		"logo-512.png",
		"manifest.json",
		"me.jpg"
	];

	const shell = [
		"client/index.ed15f1b0.js",
		"client/client.4b1e3ccb.js",
		"client/index.bc4b4d84.js",
		"client/about.028239e9.js",
		"client/index.b62674e6.js",
		"client/[slug].b4e4b07a.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
