import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, a as space, e as element, t as text, h as claim_space, c as claim_element, b as children, f as claim_text, g as detach_dev, l as add_location, j as attr_dev, m as insert_dev, o as append_dev, n as noop } from './index.ed15f1b0.js';

/* src/routes/about.svelte generated by Svelte v3.12.1 */

const file = "src/routes/about.svelte";

function create_fragment(ctx) {
	var t0, h1, t1, t2, p0, t3, t4, p1, t5, t6, h20, t7, t8, p2, t9, t10, h30, t11, t12, p3, t13, t14, h31, t15, t16, p4, t17, a0, t18, t19, t20, h40, t21, a1, t22, t23, p5, t24, span, t25, t26, t27, h41, t28, a2, t29, t30, p6, t31, a3, t32, t33, t34, h42, t35, a4, t36, t37, a5, t38, t39, p7, t40, code0, t41, t42, a6, t43, t44, t45, h21, t46, t47, p8, t48, code1, t49, t50, code2, t51, t52, code3, t53, t54, t55, h22, t56, t57, ul, li0, a7, t58, t59, li1, a8, t60, t61, li2, a9, t62, t63, li3, a10, t64, t65, li4, a11, t66, t67, p9, t68, a12, t69, t70;

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("About This Site");
			t2 = space();
			p0 = element("p");
			t3 = text("By day I work with Angular, so I wanted to use something completely different to make this site. I decided to go\n\twith Sapper, a Svelte framework based on next.js. I also haven't used Docker before and have need for handling\n\tdifferent node versions, so I used this project to get started.");
			t4 = space();
			p1 = element("p");
			t5 = text("I have a few ideas for cool sections of the site, so check back soon!");
			t6 = space();
			h20 = element("h2");
			t7 = text("Design");
			t8 = space();
			p2 = element("p");
			t9 = text("Yes, it's the default theme Sapper uses with some of the colors changed. I wanted something simple and\n\tI really liked it right off, so I'm sticking with it. At some point I'll do a portfolio piece of craziness, but I\n\tdon't need one right now.");
			t10 = space();
			h30 = element("h3");
			t11 = text("Tech");
			t12 = space();
			p3 = element("p");
			t13 = text("Because Svelte's components are so simple, I originally didn't think I'd be using Sass, but that changed real quick.\n\tI also did the layout with CSS Grid - what a breath of fresh air compared to Bootstrap and Flexbox.");
			t14 = space();
			h31 = element("h3");
			t15 = text("Fonts");
			t16 = space();
			p4 = element("p");
			t17 = text("I used a ");
			a0 = element("a");
			t18 = text("type scale");
			t19 = text(" based on perfect fourths for the sizing. I wanted to use\n\tthe golden ratio or perfect fifths, but the size gets too huge too quickly.");
			t20 = space();
			h40 = element("h4");
			t21 = text("Headings: ");
			a1 = element("a");
			t22 = text("B612");
			t23 = space();
			p5 = element("p");
			t24 = text("This font was developed by AirBus to have high visibility on airplane cockpit screens, which is just about the\n\tcoolest thing I've ever heard about a font. I'd love to use it as a programming font (there's a monospace version),\n\tbut the parentheses look far too close to square brackets: ");
			span = element("span");
			t25 = text("()");
			t26 = text(".");
			t27 = space();
			h41 = element("h4");
			t28 = text("Body: ");
			a2 = element("a");
			t29 = text("Inter");
			t30 = space();
			p6 = element("p");
			t31 = text("I found this front from this ");
			a3 = element("a");
			t32 = text("fascinating Quora answer");
			t33 = text(". The site has some super interesting info as well.");
			t34 = space();
			h42 = element("h4");
			t35 = text("Code: ");
			a4 = element("a");
			t36 = text("Monoid");
			t37 = space();
			a5 = element("a");
			t38 = text("Nerdfont");
			t39 = space();
			p7 = element("p");
			t40 = text("I picked ");
			code0 = element("code");
			t41 = text("Monoid");
			t42 = text(" as my main programming font a while ago because I found it super readable, it came with\n\tligatures, and because ");
			a6 = element("a");
			t43 = text("a\n\tmonad is a monoid in the category of endofunctors");
			t44 = text(". I used to use vim as my main editor and still have it all\n\ttricked out\tso I need Powerline support, and the extra glyphs in the NerdFont version come in handy from time to\n\ttime.");
			t45 = space();
			h21 = element("h2");
			t46 = text("Build");
			t47 = space();
			p8 = element("p");
			t48 = text("The site is hosted on Github pages, which means the static files have to be in the ");
			code1 = element("code");
			t49 = text("master");
			t50 = text(" branch. So,\n\tI made a ");
			code2 = element("code");
			t51 = text("sapper");
			t52 = text(" branch to hold the application, which I put in the ");
			code3 = element("code");
			t53 = text("app");
			t54 = text(" folder.");
			t55 = space();
			h22 = element("h2");
			t56 = text("Useful Resources");
			t57 = space();
			ul = element("ul");
			li0 = element("li");
			a7 = element("a");
			t58 = text("Svelte");
			t59 = space();
			li1 = element("li");
			a8 = element("a");
			t60 = text("Sapper");
			t61 = space();
			li2 = element("li");
			a9 = element("a");
			t62 = text("Simplified guide to using Docker for local development environment");
			t63 = space();
			li3 = element("li");
			a10 = element("a");
			t64 = text("Svelte / Sapper with Sass!");
			t65 = space();
			li4 = element("li");
			a11 = element("a");
			t66 = text("A Complete Guide to Grid");
			t67 = space();
			p9 = element("p");
			t68 = text("For ");
			a12 = element("a");
			t69 = text("About Me");
			t70 = text(", go to the homepage.");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_space(nodes);

			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t1 = claim_text(h1_nodes, "About This Site");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);

			p0 = claim_element(nodes, "P", {}, false);
			var p0_nodes = children(p0);

			t3 = claim_text(p0_nodes, "By day I work with Angular, so I wanted to use something completely different to make this site. I decided to go\n\twith Sapper, a Svelte framework based on next.js. I also haven't used Docker before and have need for handling\n\tdifferent node versions, so I used this project to get started.");
			p0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);

			p1 = claim_element(nodes, "P", {}, false);
			var p1_nodes = children(p1);

			t5 = claim_text(p1_nodes, "I have a few ideas for cool sections of the site, so check back soon!");
			p1_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);

			h20 = claim_element(nodes, "H2", {}, false);
			var h20_nodes = children(h20);

			t7 = claim_text(h20_nodes, "Design");
			h20_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);

			p2 = claim_element(nodes, "P", {}, false);
			var p2_nodes = children(p2);

			t9 = claim_text(p2_nodes, "Yes, it's the default theme Sapper uses with some of the colors changed. I wanted something simple and\n\tI really liked it right off, so I'm sticking with it. At some point I'll do a portfolio piece of craziness, but I\n\tdon't need one right now.");
			p2_nodes.forEach(detach_dev);
			t10 = claim_space(nodes);

			h30 = claim_element(nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t11 = claim_text(h30_nodes, "Tech");
			h30_nodes.forEach(detach_dev);
			t12 = claim_space(nodes);

			p3 = claim_element(nodes, "P", {}, false);
			var p3_nodes = children(p3);

			t13 = claim_text(p3_nodes, "Because Svelte's components are so simple, I originally didn't think I'd be using Sass, but that changed real quick.\n\tI also did the layout with CSS Grid - what a breath of fresh air compared to Bootstrap and Flexbox.");
			p3_nodes.forEach(detach_dev);
			t14 = claim_space(nodes);

			h31 = claim_element(nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t15 = claim_text(h31_nodes, "Fonts");
			h31_nodes.forEach(detach_dev);
			t16 = claim_space(nodes);

			p4 = claim_element(nodes, "P", {}, false);
			var p4_nodes = children(p4);

			t17 = claim_text(p4_nodes, "I used a ");

			a0 = claim_element(p4_nodes, "A", { href: true }, false);
			var a0_nodes = children(a0);

			t18 = claim_text(a0_nodes, "type scale");
			a0_nodes.forEach(detach_dev);
			t19 = claim_text(p4_nodes, " based on perfect fourths for the sizing. I wanted to use\n\tthe golden ratio or perfect fifths, but the size gets too huge too quickly.");
			p4_nodes.forEach(detach_dev);
			t20 = claim_space(nodes);

			h40 = claim_element(nodes, "H4", {}, false);
			var h40_nodes = children(h40);

			t21 = claim_text(h40_nodes, "Headings: ");

			a1 = claim_element(h40_nodes, "A", { href: true }, false);
			var a1_nodes = children(a1);

			t22 = claim_text(a1_nodes, "B612");
			a1_nodes.forEach(detach_dev);
			h40_nodes.forEach(detach_dev);
			t23 = claim_space(nodes);

			p5 = claim_element(nodes, "P", {}, false);
			var p5_nodes = children(p5);

			t24 = claim_text(p5_nodes, "This font was developed by AirBus to have high visibility on airplane cockpit screens, which is just about the\n\tcoolest thing I've ever heard about a font. I'd love to use it as a programming font (there's a monospace version),\n\tbut the parentheses look far too close to square brackets: ");

			span = claim_element(p5_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t25 = claim_text(span_nodes, "()");
			span_nodes.forEach(detach_dev);
			t26 = claim_text(p5_nodes, ".");
			p5_nodes.forEach(detach_dev);
			t27 = claim_space(nodes);

			h41 = claim_element(nodes, "H4", {}, false);
			var h41_nodes = children(h41);

			t28 = claim_text(h41_nodes, "Body: ");

			a2 = claim_element(h41_nodes, "A", { href: true }, false);
			var a2_nodes = children(a2);

			t29 = claim_text(a2_nodes, "Inter");
			a2_nodes.forEach(detach_dev);
			h41_nodes.forEach(detach_dev);
			t30 = claim_space(nodes);

			p6 = claim_element(nodes, "P", {}, false);
			var p6_nodes = children(p6);

			t31 = claim_text(p6_nodes, "I found this front from this ");

			a3 = claim_element(p6_nodes, "A", { href: true }, false);
			var a3_nodes = children(a3);

			t32 = claim_text(a3_nodes, "fascinating Quora answer");
			a3_nodes.forEach(detach_dev);
			t33 = claim_text(p6_nodes, ". The site has some super interesting info as well.");
			p6_nodes.forEach(detach_dev);
			t34 = claim_space(nodes);

			h42 = claim_element(nodes, "H4", {}, false);
			var h42_nodes = children(h42);

			t35 = claim_text(h42_nodes, "Code: ");

			a4 = claim_element(h42_nodes, "A", { href: true }, false);
			var a4_nodes = children(a4);

			t36 = claim_text(a4_nodes, "Monoid");
			a4_nodes.forEach(detach_dev);
			t37 = claim_space(h42_nodes);

			a5 = claim_element(h42_nodes, "A", { href: true }, false);
			var a5_nodes = children(a5);

			t38 = claim_text(a5_nodes, "Nerdfont");
			a5_nodes.forEach(detach_dev);
			h42_nodes.forEach(detach_dev);
			t39 = claim_space(nodes);

			p7 = claim_element(nodes, "P", {}, false);
			var p7_nodes = children(p7);

			t40 = claim_text(p7_nodes, "I picked ");

			code0 = claim_element(p7_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t41 = claim_text(code0_nodes, "Monoid");
			code0_nodes.forEach(detach_dev);
			t42 = claim_text(p7_nodes, " as my main programming font a while ago because I found it super readable, it came with\n\tligatures, and because ");

			a6 = claim_element(p7_nodes, "A", { href: true }, false);
			var a6_nodes = children(a6);

			t43 = claim_text(a6_nodes, "a\n\tmonad is a monoid in the category of endofunctors");
			a6_nodes.forEach(detach_dev);
			t44 = claim_text(p7_nodes, ". I used to use vim as my main editor and still have it all\n\ttricked out\tso I need Powerline support, and the extra glyphs in the NerdFont version come in handy from time to\n\ttime.");
			p7_nodes.forEach(detach_dev);
			t45 = claim_space(nodes);

			h21 = claim_element(nodes, "H2", {}, false);
			var h21_nodes = children(h21);

			t46 = claim_text(h21_nodes, "Build");
			h21_nodes.forEach(detach_dev);
			t47 = claim_space(nodes);

			p8 = claim_element(nodes, "P", {}, false);
			var p8_nodes = children(p8);

			t48 = claim_text(p8_nodes, "The site is hosted on Github pages, which means the static files have to be in the ");

			code1 = claim_element(p8_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t49 = claim_text(code1_nodes, "master");
			code1_nodes.forEach(detach_dev);
			t50 = claim_text(p8_nodes, " branch. So,\n\tI made a ");

			code2 = claim_element(p8_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t51 = claim_text(code2_nodes, "sapper");
			code2_nodes.forEach(detach_dev);
			t52 = claim_text(p8_nodes, " branch to hold the application, which I put in the ");

			code3 = claim_element(p8_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t53 = claim_text(code3_nodes, "app");
			code3_nodes.forEach(detach_dev);
			t54 = claim_text(p8_nodes, " folder.");
			p8_nodes.forEach(detach_dev);
			t55 = claim_space(nodes);

			h22 = claim_element(nodes, "H2", {}, false);
			var h22_nodes = children(h22);

			t56 = claim_text(h22_nodes, "Useful Resources");
			h22_nodes.forEach(detach_dev);
			t57 = claim_space(nodes);

			ul = claim_element(nodes, "UL", {}, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			a7 = claim_element(li0_nodes, "A", { href: true }, false);
			var a7_nodes = children(a7);

			t58 = claim_text(a7_nodes, "Svelte");
			a7_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t59 = claim_space(ul_nodes);

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			a8 = claim_element(li1_nodes, "A", { href: true }, false);
			var a8_nodes = children(a8);

			t60 = claim_text(a8_nodes, "Sapper");
			a8_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			t61 = claim_space(ul_nodes);

			li2 = claim_element(ul_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			a9 = claim_element(li2_nodes, "A", { href: true }, false);
			var a9_nodes = children(a9);

			t62 = claim_text(a9_nodes, "Simplified guide to using Docker for local development environment");
			a9_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			t63 = claim_space(ul_nodes);

			li3 = claim_element(ul_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			a10 = claim_element(li3_nodes, "A", { href: true }, false);
			var a10_nodes = children(a10);

			t64 = claim_text(a10_nodes, "Svelte / Sapper with Sass!");
			a10_nodes.forEach(detach_dev);
			li3_nodes.forEach(detach_dev);
			t65 = claim_space(ul_nodes);

			li4 = claim_element(ul_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			a11 = claim_element(li4_nodes, "A", { href: true }, false);
			var a11_nodes = children(a11);

			t66 = claim_text(a11_nodes, "A Complete Guide to Grid");
			a11_nodes.forEach(detach_dev);
			li4_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			t67 = claim_space(nodes);

			p9 = claim_element(nodes, "P", {}, false);
			var p9_nodes = children(p9);

			t68 = claim_text(p9_nodes, "For ");

			a12 = claim_element(p9_nodes, "A", { href: true }, false);
			var a12_nodes = children(a12);

			t69 = claim_text(a12_nodes, "About Me");
			a12_nodes.forEach(detach_dev);
			t70 = claim_text(p9_nodes, ", go to the homepage.");
			p9_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			document.title = "About This Site";
			add_location(h1, file, 11, 0, 474);
			add_location(p0, file, 13, 0, 500);
			add_location(p1, file, 19, 0, 801);
			add_location(h20, file, 23, 0, 882);
			add_location(p2, file, 25, 0, 899);
			add_location(h30, file, 31, 0, 1155);
			add_location(p3, file, 33, 0, 1170);
			add_location(h31, file, 38, 0, 1399);
			attr_dev(a0, "href", "https://type-scale.com/");
			add_location(a0, file, 41, 10, 1429);
			add_location(p4, file, 40, 0, 1415);
			attr_dev(a1, "href", "https://b612-font.com/");
			add_location(a1, file, 45, 14, 1632);
			add_location(h40, file, 45, 0, 1618);
			attr_dev(span, "class", "b612 svelte-156auxu");
			add_location(span, file, 50, 60, 1973);
			add_location(p5, file, 47, 0, 1680);
			attr_dev(a2, "href", "https://rsms.me/inter/");
			add_location(a2, file, 53, 10, 2019);
			add_location(h41, file, 53, 0, 2009);
			attr_dev(a3, "href", "https://www.quora.com/What-is-the-most-readable-font-for-the-screen");
			add_location(a3, file, 56, 30, 2102);
			add_location(p6, file, 55, 0, 2068);
			attr_dev(a4, "href", "https://larsenwork.com/monoid/");
			add_location(a4, file, 60, 10, 2278);
			attr_dev(a5, "href", "https://www.nerdfonts.com/");
			add_location(a5, file, 60, 62, 2330);
			add_location(h42, file, 60, 0, 2268);
			add_location(code0, file, 63, 10, 2400);
			attr_dev(a6, "href", "https://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html");
			add_location(a6, file, 64, 24, 2532);
			add_location(p7, file, 62, 0, 2386);
			add_location(h21, file, 70, 0, 2863);
			add_location(code1, file, 73, 84, 2967);
			add_location(code2, file, 74, 10, 3009);
			add_location(code3, file, 74, 81, 3080);
			add_location(p8, file, 72, 0, 2879);
			add_location(h22, file, 77, 0, 3111);
			attr_dev(a7, "href", "https://svelte.dev/");
			add_location(a7, file, 81, 2, 3151);
			add_location(li0, file, 80, 1, 3144);
			attr_dev(a8, "href", "https://sapper.svelte.dev/");
			add_location(a8, file, 84, 2, 3207);
			add_location(li1, file, 83, 1, 3200);
			attr_dev(a9, "href", "https://blog.atulr.com/docker-local-environment/");
			add_location(a9, file, 87, 2, 3270);
			add_location(li2, file, 86, 1, 3263);
			attr_dev(a10, "href", "https://medium.com/@sean_27490/svelte-sapper-with-sass-271fff662da9");
			add_location(a10, file, 92, 2, 3422);
			add_location(li3, file, 91, 1, 3415);
			attr_dev(a11, "href", "https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-auto-columns-rows");
			add_location(a11, file, 95, 2, 3546);
			add_location(li4, file, 94, 1, 3539);
			add_location(ul, file, 79, 0, 3138);
			attr_dev(a12, "href", "/");
			add_location(a12, file, 102, 5, 3700);
			add_location(p9, file, 101, 0, 3691);
		},

		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, h20, anchor);
			append_dev(h20, t7);
			insert_dev(target, t8, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t9);
			insert_dev(target, t10, anchor);
			insert_dev(target, h30, anchor);
			append_dev(h30, t11);
			insert_dev(target, t12, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t13);
			insert_dev(target, t14, anchor);
			insert_dev(target, h31, anchor);
			append_dev(h31, t15);
			insert_dev(target, t16, anchor);
			insert_dev(target, p4, anchor);
			append_dev(p4, t17);
			append_dev(p4, a0);
			append_dev(a0, t18);
			append_dev(p4, t19);
			insert_dev(target, t20, anchor);
			insert_dev(target, h40, anchor);
			append_dev(h40, t21);
			append_dev(h40, a1);
			append_dev(a1, t22);
			insert_dev(target, t23, anchor);
			insert_dev(target, p5, anchor);
			append_dev(p5, t24);
			append_dev(p5, span);
			append_dev(span, t25);
			append_dev(p5, t26);
			insert_dev(target, t27, anchor);
			insert_dev(target, h41, anchor);
			append_dev(h41, t28);
			append_dev(h41, a2);
			append_dev(a2, t29);
			insert_dev(target, t30, anchor);
			insert_dev(target, p6, anchor);
			append_dev(p6, t31);
			append_dev(p6, a3);
			append_dev(a3, t32);
			append_dev(p6, t33);
			insert_dev(target, t34, anchor);
			insert_dev(target, h42, anchor);
			append_dev(h42, t35);
			append_dev(h42, a4);
			append_dev(a4, t36);
			append_dev(h42, t37);
			append_dev(h42, a5);
			append_dev(a5, t38);
			insert_dev(target, t39, anchor);
			insert_dev(target, p7, anchor);
			append_dev(p7, t40);
			append_dev(p7, code0);
			append_dev(code0, t41);
			append_dev(p7, t42);
			append_dev(p7, a6);
			append_dev(a6, t43);
			append_dev(p7, t44);
			insert_dev(target, t45, anchor);
			insert_dev(target, h21, anchor);
			append_dev(h21, t46);
			insert_dev(target, t47, anchor);
			insert_dev(target, p8, anchor);
			append_dev(p8, t48);
			append_dev(p8, code1);
			append_dev(code1, t49);
			append_dev(p8, t50);
			append_dev(p8, code2);
			append_dev(code2, t51);
			append_dev(p8, t52);
			append_dev(p8, code3);
			append_dev(code3, t53);
			append_dev(p8, t54);
			insert_dev(target, t55, anchor);
			insert_dev(target, h22, anchor);
			append_dev(h22, t56);
			insert_dev(target, t57, anchor);
			insert_dev(target, ul, anchor);
			append_dev(ul, li0);
			append_dev(li0, a7);
			append_dev(a7, t58);
			append_dev(ul, t59);
			append_dev(ul, li1);
			append_dev(li1, a8);
			append_dev(a8, t60);
			append_dev(ul, t61);
			append_dev(ul, li2);
			append_dev(li2, a9);
			append_dev(a9, t62);
			append_dev(ul, t63);
			append_dev(ul, li3);
			append_dev(li3, a10);
			append_dev(a10, t64);
			append_dev(ul, t65);
			append_dev(ul, li4);
			append_dev(li4, a11);
			append_dev(a11, t66);
			insert_dev(target, t67, anchor);
			insert_dev(target, p9, anchor);
			append_dev(p9, t68);
			append_dev(p9, a12);
			append_dev(a12, t69);
			append_dev(p9, t70);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(h1);
				detach_dev(t2);
				detach_dev(p0);
				detach_dev(t4);
				detach_dev(p1);
				detach_dev(t6);
				detach_dev(h20);
				detach_dev(t8);
				detach_dev(p2);
				detach_dev(t10);
				detach_dev(h30);
				detach_dev(t12);
				detach_dev(p3);
				detach_dev(t14);
				detach_dev(h31);
				detach_dev(t16);
				detach_dev(p4);
				detach_dev(t20);
				detach_dev(h40);
				detach_dev(t23);
				detach_dev(p5);
				detach_dev(t27);
				detach_dev(h41);
				detach_dev(t30);
				detach_dev(p6);
				detach_dev(t34);
				detach_dev(h42);
				detach_dev(t39);
				detach_dev(p7);
				detach_dev(t45);
				detach_dev(h21);
				detach_dev(t47);
				detach_dev(p8);
				detach_dev(t55);
				detach_dev(h22);
				detach_dev(t57);
				detach_dev(ul);
				detach_dev(t67);
				detach_dev(p9);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

class About extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "About", options, id: create_fragment.name });
	}
}

export default About;
